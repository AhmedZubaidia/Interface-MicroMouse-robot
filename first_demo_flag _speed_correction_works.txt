#include <Wire.h>
#include <VL53L0X.h>
#include <EEPROM.h>
#include "Arduino.h"
#include <Ticker.h>  // Library for managing timers


// Define PWM pins for motor speed control
#define MOTOR1_PWM 5
#define MOTOR2_PWM 32

// Define motor control pins
#define MOTOR1_IN1 22
#define MOTOR1_IN2 23
#define MOTOR2_IN3 25
#define MOTOR2_IN4 26

// Define encoder pins
#define ENCODER1_C1 34
#define ENCODER1_C2 35
#define ENCODER2_C1 21
#define ENCODER2_C2 19

volatile bool conditionMet = false;             // Flag to track if the condition has been met
volatile unsigned long conditionStartTime = 0;  // Time when the condition started

volatile bool resetFlag = false;           // Flag to indicate reset condition
volatile unsigned long lastCheckTime = 0;  // Time when the last check occurred

volatile int lastDiff = 0;  // Global variable to store the last difference value



volatile int encoder1Pos = 0;
volatile int encoder2Pos = 0;
portMUX_TYPE mux = portMUX_INITIALIZER_UNLOCKED;

int motor1Speed = 100;
int motor2Speed = 100;
unsigned long lastChangeTime1 = 0;
volatile unsigned long lastChangeTime2 = 0;
volatile int lastEnc1Pos = 0;
volatile int lastEnc2Pos = 0;
int last_increment2;
int last_increment1;
volatile unsigned long elapsedMillis = 0;

volatile unsigned long globalElapsedMillis = 0;

volatile int motorIncrement1 = 0;         // Global variable to store the increment value for motor 1
volatile int motorIncrement2 = 0;         // Global variable to store the increment value for motor 2
volatile unsigned long lastDiffTime = 0;  // Global variable to track the time of the last difference

int temp1_speed=70; //basic speed for correction 
int temp2_speed=70;

// EEPROM addresses for saving speeds
#define EEPROM_ADDR_MOTOR1_SPEED 0
#define EEPROM_ADDR_MOTOR2_SPEED 4

VL53L0X sensor;

Ticker encoderTicker;   // Create a Ticker object
Ticker distanceTicker;  // Create a Ticker object
Ticker timeTicker;      // Create a Ticker object for timing



// Define timer
hw_timer_t * timer = NULL;
volatile unsigned long elapsedTime = 0;
volatile bool timeFlags[8] = {false};
volatile bool leftWheelFlags[8] = {false};
volatile bool rightWheelFlags[8] = {false};
volatile bool bothWheelsFlags[8] = {false};


volatile long lastEncoder1Pos = 0;
volatile long lastEncoder2Pos = 0;


// ------------------- Interrupt Service Routines -------------------

void IRAM_ATTR onTimer() {
  elapsedTime += 1;  // Increment elapsed time by 1 ms

  // Set flags for every 0.5 seconds (500 ms)
  if (elapsedTime % 500 == 0) {
    int index = (elapsedTime / 500) - 1;
    if (index >= 0 && index < 8) {
      if (encoder1Pos == lastEncoder1Pos) {
        leftWheelFlags[index] = true;
      } else {
        leftWheelFlags[index] = false;
      }

      if (encoder2Pos == lastEncoder2Pos) {
        rightWheelFlags[index] = true;
      } else {
        rightWheelFlags[index] = false;
      }

      if (encoder1Pos == lastEncoder1Pos && encoder2Pos == lastEncoder2Pos) {
        bothWheelsFlags[index] = true;
      } else {
        bothWheelsFlags[index] = false;
      }

      lastEncoder1Pos = encoder1Pos;
      lastEncoder2Pos = encoder2Pos;
    }
  }

  // Reset elapsedTime after 4000 ms
  if (elapsedTime == 4000) {
    elapsedTime = 0;
    // Reset all flags
    for (int i = 0; i < 8; i++) {
      leftWheelFlags[i] = false;
      rightWheelFlags[i] = false;
      bothWheelsFlags[i] = false;
    }
  }
}


void IRAM_ATTR updateEncoder1C1() {
  int A = digitalRead(ENCODER1_C1);
  int B = digitalRead(ENCODER1_C2);
  portENTER_CRITICAL_ISR(&mux);
  if (A == B) {
    encoder1Pos++;
  } else {
    encoder1Pos--;
  }
  portEXIT_CRITICAL_ISR(&mux);
}

void IRAM_ATTR updateEncoder1C2() {
  int A = digitalRead(ENCODER1_C1);
  int B = digitalRead(ENCODER1_C2);
  portENTER_CRITICAL_ISR(&mux);
  if (A != B) {
    encoder1Pos++;
  } else {
    encoder1Pos--;
  }
  portEXIT_CRITICAL_ISR(&mux);
}

void IRAM_ATTR updateEncoder2C1() {
  int A = digitalRead(ENCODER2_C1);
  int B = digitalRead(ENCODER2_C2);
  portENTER_CRITICAL_ISR(&mux);
  if (A == B) {
    encoder2Pos++;
  } else {
    encoder2Pos--;
  }
  portEXIT_CRITICAL_ISR(&mux);
}

void IRAM_ATTR updateEncoder2C2() {
  int A = digitalRead(ENCODER2_C1);
  int B = digitalRead(ENCODER2_C2);
  portENTER_CRITICAL_ISR(&mux);
  if (A != B) {
    encoder2Pos++;
  } else {
    encoder2Pos--;
  }
  portEXIT_CRITICAL_ISR(&mux);
}

void waitUntilConditionMet() {
  unsigned long startTime = millis();

  while (true) {
    unsigned long currentTime = millis();

    portENTER_CRITICAL(&mux);
    int enc1Pos = encoder1Pos;
    int enc2Pos = encoder2Pos;
    portEXIT_CRITICAL(&mux);

    int diff = abs(enc1Pos - enc2Pos);
    int diff_stop = abs(diff - lastDiff);
    unsigned long time_we_have = currentTime - startTime;

    Serial.print(" diff: ");
    Serial.print(diff);
    Serial.print("  lastDiff: ");
    Serial.print(lastDiff);
    Serial.print("  diff_stop: ");
    Serial.println(diff_stop);
    Serial.print("currentTime - startTime = ");
    Serial.print(time_we_have);

    // Check if the difference remains less than 7 for more than 1 second
    if (abs(diff_stop) < 7) {
      if (!conditionMet) {
        conditionStartTime = currentTime;  // Start timing the condition
        conditionMet = true;
        Serial.println("Condition started");
      } else if (currentTime - conditionStartTime >= 1000) {  // Check if 1 second has passed
        resetFlag = true;
        lastCheckTime = currentTime;
        Serial.println("Set resetFlag");
        break;  // Exit the loop after setting the flag
      }
    } else {
      // Reset the condition tracking if the difference is not within the limit
      conditionMet = false;
      conditionStartTime = 0;
      lastDiff = diff;
      lastDiffTime = currentTime;
      Serial.println("Reset condition tracking");
    }

    // Print encoder values, motor speeds, and the global increments for debugging
    Serial.print(" iam waitUntilConditionMet() ");
    Serial.println("");

    delay(100);  // Adjust delay to allow time for encoder values to update
  }
}



void checkEncoderDifference() {
  unsigned long currentTime = millis();

  portENTER_CRITICAL(&mux);
  int enc1Pos = encoder1Pos;
  int enc2Pos = encoder2Pos;
  portEXIT_CRITICAL(&mux);

  int diff = abs(enc1Pos - enc2Pos);
  int diff_stop = abs(diff - lastDiff);
  unsigned long time_we_have = currentTime - lastDiffTime;

  Serial.print(" diff: ");
  Serial.print(diff);
  Serial.print("  lastDiff: ");
  Serial.print(lastDiff);
  Serial.print("  diff_stop: ");
  Serial.println(diff_stop);
  Serial.print("currentTime - lastDiffTime = ");
  Serial.print(time_we_have);

  // Calculate 5% of the current motor speeds and store them in the global variables
  if (conditionMet && motor2Speed == 0 && motor1Speed != 0) {
    motorIncrement1 = static_cast<int>(motor1Speed * 0.05);
    lastChangeTime1 = currentTime;  // Reset the timer to avoid continuous increase
    lastDiffTime = currentTime;     // Ensure lastDiffTime is updated correctly
    Serial.println("Updated lastDiffTime for motor1");
  }

  if (conditionMet && motor1Speed == 0 && motor2Speed != 0) {
    motorIncrement2 = static_cast<int>(motor2Speed * 0.05);
    lastChangeTime2 = currentTime;  // Reset the timer to avoid continuous increase
    lastDiffTime = currentTime;     // Ensure lastDiffTime is updated correctly
    Serial.println("Updated lastDiffTime for motor2");
  }

  // Check if the difference has remained the same for 450 ms
  if (conditionMet && motor1Speed != 0 && motor2Speed != 0) {
    // Increase speed by 5% if the conditionMet is true
    motorIncrement1 = static_cast<int>(motor1Speed * 0.05);
    motorIncrement2 = static_cast<int>(motor2Speed * 0.05);
    lastDiffTime = currentTime;  // Ensure lastDiffTime is updated correctly
    Serial.println("Updated lastDiffTime for both motors");
  } else {
    // Update the last difference and time
    lastDiff = diff;
    lastDiffTime = currentTime;  // Ensure this is updated correctly
    Serial.println("Updated lastDiffTime normally");
  }

  // Print encoder values, motor speeds, and the global increments for debugging
  Serial.print(" iam checkEncoderDifference() ");
  Serial.println("");
}



void startCheckingEncoderDifference() {
  encoderTicker.attach(0.5, checkEncoderDifference);
}

void stopCheckingEncoderDifference() {
  encoderTicker.detach();
}


void checkDistanceAndControlMotors() {
  int distance = sensor.readRangeContinuousMillimeters();
  if (sensor.timeoutOccurred()) {
    Serial.println(" TIMEOUT");
    // Handle timeout: stop motors or take appropriate action
    motor1Speed = 0;
    motor2Speed = 0;
    analogWrite(MOTOR1_PWM, motor1Speed);
    analogWrite(MOTOR2_PWM, motor2Speed);
    return;
  }

  if (distance <= 150) {
    motor1Speed = 0;
    motor2Speed = 0;
    rotateMotor1ToRight();
    rest_moveForward();
  }

  // Apply the motor speeds
  analogWrite(MOTOR1_PWM, motor1Speed);
  analogWrite(MOTOR2_PWM, motor2Speed);

  // Print distance for debugging
  Serial.print("Distance: ");
  Serial.print(distance);
  Serial.println(" mm");
}


void startDistanceChecking() {
  distanceTicker.attach(0.1, checkDistanceAndControlMotors);
}

void stopDistanceChecking() {
  distanceTicker.detach();
}

void updateElapsedMillis() {
  globalElapsedMillis++;
}




// ------------------- End of Interrupt Service Routines -------------------


// ------------------- Void setup() -------------------
void setup() {
  Serial.begin(115200);

  // Set encoder pins as inputs
  pinMode(ENCODER1_C1, INPUT);
  pinMode(ENCODER1_C2, INPUT);
  pinMode(ENCODER2_C1, INPUT);
  pinMode(ENCODER2_C2, INPUT);

  // Attach interrupts
  attachInterrupt(digitalPinToInterrupt(ENCODER1_C1), updateEncoder1C1, CHANGE);
  attachInterrupt(digitalPinToInterrupt(ENCODER1_C2), updateEncoder1C2, CHANGE);
  attachInterrupt(digitalPinToInterrupt(ENCODER2_C1), updateEncoder2C1, CHANGE);
  attachInterrupt(digitalPinToInterrupt(ENCODER2_C2), updateEncoder2C2, CHANGE);

  // Set motor control pins as outputs
  pinMode(MOTOR1_PWM, OUTPUT);
  pinMode(MOTOR2_PWM, OUTPUT);
  pinMode(MOTOR1_IN1, OUTPUT);
  pinMode(MOTOR1_IN2, OUTPUT);
  pinMode(MOTOR2_IN3, OUTPUT);
  pinMode(MOTOR2_IN4, OUTPUT);

  // Initialize motors to off
  digitalWrite(MOTOR1_IN1, HIGH);
  digitalWrite(MOTOR1_IN2, LOW);
  digitalWrite(MOTOR2_IN3, HIGH);
  digitalWrite(MOTOR2_IN4, LOW);

  // Read speeds from EEPROM
  EEPROM.get(EEPROM_ADDR_MOTOR1_SPEED, motor1Speed);
  EEPROM.get(EEPROM_ADDR_MOTOR2_SPEED, motor2Speed);

  // Ensure speeds are within valid range
  motor1Speed = constrain(motor1Speed, 0, 255);
  motor2Speed = constrain(motor2Speed, 0, 255);

  analogWrite(MOTOR1_PWM, motor1Speed);
  analogWrite(MOTOR2_PWM, motor2Speed);

  // Initialize VL53L0X sensor
  Wire.begin(4, 16);  // SDA = GPIO 16, SCL = GPIO 4
  sensor.init();
  sensor.setTimeout(500);
  sensor.startContinuous();

  // Attach tickers
  distanceTicker.attach(0.1, checkDistanceAndControlMotors);
  // encoderTicker.attach(0.5, checkEncoderDifference);
  timeTicker.attach(0.001, updateElapsedMillis);  // Increment globalElapsedMillis every 1 ms


  timer = timerBegin(0, 80, true);              // Timer 0, prescaler 80, count up
  timerAttachInterrupt(timer, &onTimer, true);  // Attach ISR to timer
  timerAlarmWrite(timer, 1000, true);           // Set alarm to 1 ms (80 MHz / 80 = 1 MHz, so 1000 counts = 1 ms)
  timerAlarmEnable(timer);                      // Enable the alarm
}


void incrementElapsedMillis() {
  elapsedMillis++;
}

// ------------------- End of void setup() -------------------



//--------------------- Void loop() -------------------
void loop() {

  int distance = sensor.readRangeContinuousMillimeters();
  if (sensor.timeoutOccurred()) {
    Serial.print(" TIMEOUT");
    return;
  }

  portENTER_CRITICAL(&mux);
  int enc1Pos = encoder1Pos;
  int enc2Pos = encoder2Pos;
  portEXIT_CRITICAL(&mux);

  unsigned long currentTime = millis();

  forward_with_correction(motor1Speed, motor2Speed);



  // Print the left wheel flags
  Serial.print("Left Wheel Flags: ");
  for (int i = 0; i < 8; i++) {
    Serial.print(leftWheelFlags[i]);
    if (i < 7) Serial.print(", ");
  }
  Serial.println();

  // Print the right wheel flags
  Serial.print("Right Wheel Flags: ");
  for (int i = 0; i < 8; i++) {
    Serial.print(rightWheelFlags[i]);
    if (i < 7) Serial.print(", ");
  }
  Serial.println();

  // Print the both wheels flags
  Serial.print("Both Wheels Flags: ");
  for (int i = 0; i < 8; i++) {
    Serial.print(bothWheelsFlags[i]);
    if (i < 7) Serial.print(", ");
  }
  Serial.println();

  delay(100);  // Adjust delay for smoother control

  // Print encoder values
  Serial.print("Encoder 1 Position: ");
  Serial.print(enc1Pos);
  Serial.print("  Encoder 2 Position: ");
  Serial.print(enc2Pos);
  Serial.print("  Motor 1 Speed: ");
  Serial.print(motor1Speed);
  Serial.print("  Motor 2 Speed: ");
  Serial.print(motor2Speed);
  Serial.print("  Distance: ");
  Serial.print(distance);
  Serial.println(" mm");

  delay(100);  // Adjust delay for smoother control
}


// ------------------- End of void loop() -------------------


// ------------------- Helper Functions -------------------


void rest_moveForward() {


  portENTER_CRITICAL(&mux);
  encoder1Pos = 0;
  encoder2Pos = 0;
  portEXIT_CRITICAL(&mux);

  motor1Speed = 100;
  motor2Speed = 100;
  int new_motor1Speed;
  int new_motor2Speed;

  analogWrite(MOTOR1_PWM, motor1Speed);
  analogWrite(MOTOR2_PWM, motor2Speed);

  digitalWrite(MOTOR2_IN3, HIGH);
  digitalWrite(MOTOR2_IN4, LOW);
  digitalWrite(MOTOR1_IN1, HIGH);
  digitalWrite(MOTOR1_IN2, LOW);
}void forward_with_correction(int &motor1Speed, int &motor2Speed) {
    int enc1Pos, enc2Pos;
    int diff;

    portENTER_CRITICAL(&mux);
    enc1Pos = encoder1Pos;
    enc2Pos = encoder2Pos;
    portEXIT_CRITICAL(&mux);

    diff = enc1Pos - enc2Pos;
    unsigned long currentTime = millis(); // To track the time when diff was last checked
    int lastDiff = diff; // To store the last diff value

    // Combined Serial.print statements to print all values in one line
    Serial.print("enc1Pos: ");
    Serial.print(enc1Pos);
    Serial.print(" | enc2Pos: ");
    Serial.print(enc2Pos);
    Serial.print(" | diff: ");
    Serial.print(diff);
    Serial.print(" | motor1Speed: ");
    Serial.print(motor1Speed);
    Serial.print(" | motor2Speed: ");
    Serial.print(motor2Speed);
    Serial.print(" | motorIncrement1: ");
    Serial.print(motorIncrement1);
    Serial.print(" | motorIncrement2: ");
    Serial.println(motorIncrement2);

    delay(100); // Adjust delay to allow time for encoder values to update

    // Calculate the sum of true values in bothWheelsFlags array
    int trueCount = 0;
    int bothWheels_flag_count = 0;
    int leftWheels_flag_count = 0;
    int rightWheels_flag_count = 0;


    for (int i = 0; i < 8; i++) {
        if (bothWheelsFlags[i]) {
            bothWheels_flag_count++;
        }
    }

    for (int i = 0; i < 8; i++) {
        if (leftWheelFlags[i]) {
            leftWheels_flag_count++;
        }
    }

    for (int i = 0; i < 8; i++) {
        if (rightWheelFlags[i]) {
            rightWheels_flag_count++;
        }
    }


    // Increment motor speeds by 10% if trueCount is greater than 5
    if (bothWheels_flag_count > 5 && motor1Speed != 0 && motor2Speed != 0) {
        motorIncrement1 = 30;
        motorIncrement2 = 30;
        Serial.println("Inside if (trueCount > 5)");

        for (int i = 0; i < 8; i++) {
            bothWheelsFlags[i] = false;
        }
    }


    if(leftWheels_flag_count > 5 && motor2Speed == 0 && motor1Speed != 0) {
        motorIncrement1 =30;
        Serial.println("Inside if (leftWheels_flag_count > 5)");

        for (int i = 0; i < 8; i++) {
            leftWheelFlags[i] = false;
        }
    }

    if(rightWheels_flag_count > 5 && motor1Speed == 0 && motor2Speed != 0) {
        motorIncrement2 = 30;
        Serial.println("Inside if (rightWheels_flag_count > 5)");

        for (int i = 0; i < 8; i++) {
            rightWheelFlags[i] = false;
        }
    }



    // Only adjust motor speeds if the difference is greater than 5
    if (abs(diff) > 5) {
        if (diff > 0) {
            temp2_speed = min(temp2_speed + motorIncrement2, 255); // Maintain speed of motor 2, cap at 255
            motor1Speed = 0; // Slow down motor 1
            motor2Speed = min(temp2_speed, 255); // Maintain speed of motor 2, cap at 255

        } else {
            temp1_speed = min(temp1_speed + motorIncrement1, 255); // Maintain speed of motor 2, cap at 255
            motor1Speed = min(temp1_speed, 255); // Maintain speed of motor 1, cap at 255
            motor2Speed = 0; // Slow down motor 2
        }
    }

    if (abs(diff) < 25) {
        motor1Speed = min(100  + motorIncrement1 , 255); // Maintain speed of motor 1, cap at 255
        motor2Speed = min(120 + motorIncrement2 , 255); // Maintain speed of motor 2, cap at 255
    }

    // Store the last increment values
    motorIncrement1= 0;
    motorIncrement2= 0;


    // Use the adjusted speeds for further corrections
    analogWrite(MOTOR1_PWM, motor1Speed);
    analogWrite(MOTOR2_PWM, motor2Speed);
}





// ------------------- End of Helper Functions -------------------




// ------------------- Motor rotation functions -------------------


void rotateMotor2ToLeft() {

  //stopCheckingEncoderDifference();


  digitalWrite(MOTOR1_IN1, LOW);
  digitalWrite(MOTOR1_IN2, LOW);

  motor1Speed = 0;
  motor2Speed = 100;
  analogWrite(MOTOR1_PWM, motor1Speed);


  // Reset encoder values
  portENTER_CRITICAL(&mux);
  encoder2Pos = 0;
  portEXIT_CRITICAL(&mux);

  // startCheckingEncoderDifference();

  while (true) {
    portENTER_CRITICAL(&mux);
    int enc2Pos = encoder2Pos;
    portEXIT_CRITICAL(&mux);

    if (enc2Pos < 1086) {
      // Move motor 2
      digitalWrite(MOTOR2_IN3, HIGH);
      digitalWrite(MOTOR2_IN4, LOW);
      analogWrite(MOTOR2_PWM, motor2Speed);  // Full speed
    } else {
      // Stop motor 2
      digitalWrite(MOTOR2_IN3, LOW);
      digitalWrite(MOTOR2_IN4, LOW);

      motor2Speed = 0;
      analogWrite(MOTOR2_PWM, motor2Speed);

      // Print final encoder value for debugging
      Serial.print("Encoder 2 Position before reset: ");
      Serial.println(enc2Pos);

      // Wait for 10 seconds
      delay(500);

      // Reset encoder positions after the delay
      portENTER_CRITICAL(&mux);
      encoder2Pos = 0;
      portEXIT_CRITICAL(&mux);

      // Print reset message for debugging
      Serial.println("Encoder 2 Position reset.");

      // Exit the loop after the rotation is done and encoders are reset
      break;
    }

    // Print encoder value for debugging
    Serial.print("Encoder 2 Position: ");
    Serial.println(enc2Pos);

    // Small delay to prevent overwhelming the serial output
    delay(100);
  }
}
void rotateMotor1ToRight() {
  // Ensure motor 2 is not moving
  digitalWrite(MOTOR2_IN3, LOW);
  digitalWrite(MOTOR2_IN4, LOW);
  analogWrite(MOTOR2_PWM, 0);

  // Reset encoder values
  portENTER_CRITICAL(&mux);
  encoder1Pos = 0;
  portEXIT_CRITICAL(&mux);

  while (true) {
    portENTER_CRITICAL(&mux);
    int enc1Pos = abs(encoder1Pos);
    portEXIT_CRITICAL(&mux);

    if (enc1Pos < 1080) {
      // Move motor 1
      digitalWrite(MOTOR1_IN1, HIGH);
      digitalWrite(MOTOR1_IN2, LOW);
      analogWrite(MOTOR1_PWM, 100);  // Full speed
    } else {
      // Stop motor 1
      digitalWrite(MOTOR1_IN1, LOW);
      digitalWrite(MOTOR1_IN2, LOW);
      analogWrite(MOTOR1_PWM, 0);

      // Print final encoder value for debugging
      Serial.print("Encoder 1 Position before reset: ");
      Serial.println(enc1Pos);

      // Wait for 10 seconds
      delay(1000);

      // Reset encoder positions after the delay
      portENTER_CRITICAL(&mux);
      encoder1Pos = 0;
      portEXIT_CRITICAL(&mux);

      // Print reset message for debugging
      Serial.println("Encoder 1 Position reset.");

      // Exit the loop after the rotation is done and encoders are reset
      break;
    }

    // Print encoder value for debugging
    Serial.print("Encoder 1 Position: ");
    Serial.println(enc1Pos);

    // Small delay to prevent overwhelming the serial output
    delay(100);
  }
}


void rotateMotor1ToRight_backward() {

  //stopCheckingEncoderDifference();


  // Ensure motor 2 is not moving
  digitalWrite(MOTOR2_IN3, LOW);
  digitalWrite(MOTOR2_IN4, LOW);

  motor1Speed = 100;
  motor2Speed = 0;
  analogWrite(MOTOR2_PWM, motor2Speed);


  // Reset encoder values
  portENTER_CRITICAL(&mux);
  encoder1Pos = 0;
  portEXIT_CRITICAL(&mux);

  //startCheckingEncoderDifference();

  while (true) {
    portENTER_CRITICAL(&mux);
    int enc1Pos = abs(encoder1Pos);
    portEXIT_CRITICAL(&mux);

    if (enc1Pos < 1080) {
      // Move motor 1
      digitalWrite(MOTOR1_IN1, LOW);
      digitalWrite(MOTOR1_IN2, HIGH);
      analogWrite(MOTOR1_PWM, motor1Speed);  // Full speed
    } else {
      // Stop motor 1
      digitalWrite(MOTOR1_IN1, LOW);
      digitalWrite(MOTOR1_IN2, LOW);

      motor1Speed = 0;

      analogWrite(MOTOR1_PWM, motor1Speed);

      // Print final encoder value for debugging
      Serial.print("Encoder 1 Position before reset: ");
      Serial.println(enc1Pos);

      // Wait for 10 seconds
      delay(500);

      // Reset encoder positions after the delay
      portENTER_CRITICAL(&mux);
      encoder1Pos = 0;
      portEXIT_CRITICAL(&mux);

      // Print reset message for debugging
      Serial.println("Encoder 1 Position reset.");

      // Exit the loop after the rotation is done and encoders are reset
      break;
    }

    // Print encoder value for debugging
    Serial.print("Encoder 1 Position: ");
    Serial.println(enc1Pos);

    // Small delay to prevent overwhelming the serial output
    delay(100);
  }
}
// ------------------- End of Motor rotation functions -------------------