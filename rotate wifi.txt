#include <Arduino.h>
#include <WiFi.h>
#include <ESPAsyncWebServer.h>

// WiFi credentials (replace with your desired SSID and password)
const char* ssid = "ESP32-AP";
const char* password = "123456789";

// Static IP configuration
IPAddress local_IP(192, 168, 1, 1);
IPAddress gateway(192, 168, 1, 1);
IPAddress subnet(255, 255, 255, 0);

// Define motor control pins
#define MOTOR1_IN1 22
#define MOTOR1_IN2 23
#define MOTOR2_IN3 25
#define MOTOR2_IN4 26

// Define PWM pins for motor speed control
#define MOTOR1_PWM 5
#define MOTOR2_PWM 32

// Motor speed variables
int motor1Speed = 0;
int motor2Speed = 0;

// Create AsyncWebServer object on port 80
AsyncWebServer server(80);

const char index_html[] PROGMEM = R"rawliteral(
<!DOCTYPE HTML><html>
<head>
  <title>ESP32 Motor Speed Control</title>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <script>
    function sendMotor1Speed() {
      var speed = document.getElementById('motor1SpeedInput').value;
      var duration = document.getElementById('motor1Duration').value;
      var xhr = new XMLHttpRequest();
      xhr.open('GET', '/setMotor1Speed?value=' + speed + '&duration=' + duration, true);
      xhr.send();
    }
    function sendMotor2Speed() {
      var speed = document.getElementById('motor2SpeedInput').value;
      var duration = document.getElementById('motor2Duration').value;
      var xhr = new XMLHttpRequest();
      xhr.open('GET', '/setMotor2Speed?value=' + speed + '&duration=' + duration, true);
      xhr.send();
    }
  </script>
</head>
<body>
  <h1>ESP32 Motor Speed Control</h1>
  <form onsubmit="sendMotor1Speed(); return false;">
    <p>Motor 1 Speed: <input type="text" id="motor1SpeedInput" value="%MOTOR1SPEED%"></p>
    <p>Duration (seconds): <input type="text" id="motor1Duration" value="0"></p>
    <p><input type="submit" value="Set Motor 1 Speed"></p>
  </form>
  <form onsubmit="sendMotor2Speed(); return false;">
    <p>Motor 2 Speed: <input type="text" id="motor2SpeedInput" value="%MOTOR2SPEED%"></p>
    <p>Duration (seconds): <input type="text" id="motor2Duration" value="0"></p>
    <p><input type="submit" value="Set Motor 2 Speed"></p>
  </form>
</body>
</html>
)rawliteral";

void setup() {
  // Initialize Serial communication
  Serial.begin(115200);

  // Configure ESP32 as an access point with static IP
  WiFi.softAP(ssid, password);
  WiFi.softAPConfig(local_IP, gateway, subnet);

  // Print the IP address
  Serial.println();
  Serial.print("Access Point \"");
  Serial.print(ssid);
  Serial.println("\" started");
  Serial.print("IP address:\t");
  Serial.println(WiFi.softAPIP());

  // Set motor control pins as outputs
  pinMode(MOTOR1_IN1, OUTPUT);
  pinMode(MOTOR1_IN2, OUTPUT);
  pinMode(MOTOR2_IN3, OUTPUT);
  pinMode(MOTOR2_IN4, OUTPUT);

  // Set PWM pins as outputs
  pinMode(MOTOR1_PWM, OUTPUT);
  pinMode(MOTOR2_PWM, OUTPUT);

  // Set motor directions
  digitalWrite(MOTOR1_IN1, HIGH);
  digitalWrite(MOTOR1_IN2, LOW);
  digitalWrite(MOTOR2_IN3, HIGH);
  digitalWrite(MOTOR2_IN4, LOW);

  // Serve the HTML page
  server.on("/", HTTP_GET, [](AsyncWebServerRequest *request) {
    String html = index_html;
    html.replace("%MOTOR1SPEED%", String(motor1Speed));
    html.replace("%MOTOR2SPEED%", String(motor2Speed));
    request->send(200, "text/html", html);
  });

  // Update motor 1 speed
  server.on("/setMotor1Speed", HTTP_GET, [](AsyncWebServerRequest *request) {
    if (request->hasParam("value") && request->hasParam("duration")) {
      motor1Speed = request->getParam("value")->value().toInt();
      int duration = request->getParam("duration")->value().toInt();
      analogWrite(MOTOR1_PWM, motor1Speed);
      delay(duration * 1000);
      analogWrite(MOTOR1_PWM, 0);
    }
    request->send(200, "text/plain", "OK");
  });

  // Update motor 2 speed
  server.on("/setMotor2Speed", HTTP_GET, [](AsyncWebServerRequest *request) {
    if (request->hasParam("value") && request->hasParam("duration")) {
      motor2Speed = request->getParam("value")->value().toInt();
      int duration = request->getParam("duration")->value().toInt();
      analogWrite(MOTOR2_PWM, motor2Speed);
      delay(duration * 1000);
      analogWrite(MOTOR2_PWM, 0);
    }
    request->send(200, "text/plain", "OK");
  });

  // Start server
  server.begin();
  Serial.println("Server started");
}

void loop() {
  // Empty loop as control is done via the web interface
}
